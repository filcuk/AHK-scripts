#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
;#Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

#Persistent
#SingleInstance Force
#Include %A_ScriptDir%\lib

Hotstring("EndChars", " `n`t")

; End of app config

MenuNoIdle := "No &Idle"
MenuNoIdleEnabled := true
MenuAppReload := "&Reload"
MenuAppExit := "&Exit"
MenuTest := "Test"

Menu, Tray, Add
Menu, Tray, Add, % MenuNoIdle, MenuHandler
If MenuNoIdleEnabled
	Menu, Tray, Check, % MenuNoIdle
Else
	Menu, Tray, UnCheck, % MenuNoIdle
Menu, Tray, Add
Menu, Tray, Add, % MenuAppReload, MenuHandler
Menu, Tray, Add, % MenuAppExit, MenuHandler
Menu, Tray, Add, % MenuTest, MenuHandler





; Inactivity loop
;~ #InstallKeybdHook
;~ #InstallMouseHook

MaxIdleMs := 1000 * 60
MoveS := 50
MoveL := 100

IdleLoop:
Loop
{
	If (A_TimeIdle > MaxIdleMs && MenuNoIdleEnabled)
	{
		SendEvent {Click rel 0, -%MoveS%, 0}
		SendEvent {Click rel 0, %MoveL%, 0}
		SendEvent {Click rel 0, -%MoveS%, 0}
		SendEvent {Click rel %MoveS%, 0, 0}
		SendEvent {Click rel -%MoveL%, 0, 0}
		SendEvent {Click rel %MoveS%, 0, 0}
		
		Sleep % MaxIdleMs * 0.75
	}
	Sleep, 1000
}



; End of auto-execute section
return


MenuHandler:
MenuID := A_ThisMenu
MenuItemID := A_ThisMenuItem
MenuItemPos := A_ThisMenuItemPos

Switch MenuItemID
{
	Case % MenuNoIdle:
		Menu, % MenuID, ToggleCheck, % MenuItemID
		MenuNoIdleEnabled := !MenuNoIdleEnabled
		return
	Case % MenuAppReload:
		Reload
	Case % MenuAppExit:
		ExitApp
	Case % MenuTest:
		MsgBox % MenuID . ", " . MenuItemID . ", " . MenuItemPos
}

; Scrub counter from Glasscubes URL
; From: https://corporatesolutions.glasscubes.com/cube/tasksv2/12345?51#task/6789
; To:	https://corporatesolutions.glasscubes.com/cube/tasksv2/12345?#task/6789
$^c::
Clipboard := ""
Send, ^c
Clipwait, 3
Contents := Clipboard

if (InStr(Contents, "https://corporatesolutions.glasscubes.com/") <> 0) {
	; URL contains selector
	if (InStr(Contents, "#") <> 0)
		Contents := SubStr(Contents, 1, InStr(Contents, "?")) . SubStr(Contents, InStr(Contents, "#"))
	else
		Contents := SubStr(Contents, 1, InStr(Contents, "?") - 1)
	
	Clipboard := Contents
}
return

return





; Libraries
#Include Hotstrings.ahk
#Include TrayTip.ahk
#Include IsTrayMenuChecked.ahk

